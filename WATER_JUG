from collections import deque

def water_jug_bfs(a_capacity, b_capacity, target):
    visited = set()

    # Queue of states: (a, b, path)
    queue = deque()
    queue.append((0, 0, []))

    while queue:
        a, b, steps = queue.popleft()
        
        if (a, b) in visited:
            continue
        visited.add((a, b))

        steps = steps + [(a, b)]

        if a == target or b == target:
            return steps

        # All possible operations
        possible_moves = [
            (a_capacity, b),          # Fill Jug A
            (a, b_capacity),          # Fill Jug B
            (0, b),                   # Empty Jug A
            (a, 0),                   # Empty Jug B
            (a - min(a, b_capacity - b), b + min(a, b_capacity - b)),  # Pour A → B
            (a + min(b, a_capacity - a), b - min(b, a_capacity - a))   # Pour B → A
        ]

        for move in possible_moves:
            if move not in visited:
                queue.append((move[0], move[1], steps))

    return None  # No solution

# Example usage:
a_capacity = 5
b_capacity = 4
target = 2

result = water_jug_bfs(a_capacity, b_capacity, target)

if result:
    print("Solution found in", len(result) - 1, "steps:")
    for step in result:
        print(f"Jug A: {step[0]} | Jug B: {step[1]}")
else:
    print("No solution.")
